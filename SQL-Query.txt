
1. **Query to get Customer Name and Average Sale:**

SELECT CONCAT(D.LastName, ' ', D.FirstName) AS [Customer Name], AVG(F.SalesAmount) AS [Average Sale]
FROM FactInternetSales F
INNER JOIN DimCustomer D
ON F.CustomerKey = D.CustomerKey
GROUP BY CONCAT(D.LastName, ' ', D.FirstName)
ORDER BY [Customer Name] ASC;
```


2. **Query to count the number of columns in DimCustomer:**

SELECT COUNT(*) AS [Number of Columns]
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'DimCustomer';

**Description:** This query counts the number of columns in the `DimCustomer` table from the `INFORMATION_SCHEMA.COLUMNS` view.

3. **Query to count the number of rows in DimCustomer:**

SELECT COUNT(*) AS [Number of Rows]
FROM DimCustomer;

**Description:** This query counts the total number of rows in the `DimCustomer` table.

4. **Query to get unique occupations from DimCustomer:**

SELECT DISTINCT EnglishOccupation AS [Unique Occupations]
FROM DimCustomer;

**Description:** This query retrieves a list of unique occupations from the `DimCustomer` table.

5. **Query to find records with null EnglishOccupation in DimCustomer:**

SELECT *
FROM DimCustomer
WHERE EnglishOccupation IS NULL;

**Description:** This query selects all records from the `DimCustomer` table where the `EnglishOccupation` field is null.

6. **Query to list base tables in AdventureWorksDW2019:**

SELECT TABLE_NAME
FROM AdventureWorksDW2019.INFORMATION_SCHEMA.TABLES
WHERE TABLE_TYPE = 'BASE TABLE';

**Description:** This query lists the names of all base tables in the `AdventureWorksDW2019` database.

7. **Query to select all tables in AdventureWorksDW2019:**

SELECT *
FROM AdventureWorksDW2019.INFORMATION_SCHEMA.TABLES;

**Description:** This query retrieves all information about the tables in the `AdventureWorksDW2019` database.

8. **Query to join DimGeography and DimSalesTerritory:**

SELECT GeographyKey, City, EnglishCountryRegionName AS [CountryName], SalesTerritoryRegion, 
       SalesTerritoryGroup, PostalCode, S.SalesTerritoryKey
FROM DimGeography G
INNER JOIN DimSalesTerritory S
ON G.SalesTerritoryKey = S.SalesTerritoryKey;

**Description:** This query joins the `DimGeography` and `DimSalesTerritory` tables to retrieve geography and sales territory information.

9. **Query to get product details with status:**

SELECT ProductKey, P.ProductSubcategoryKey, EnglishProductName AS [ProductName], 
       Category, Subcategory, StandardCost, Color, ModelName, 
CASE
    WHEN Status IS NULL THEN 'Outdated' 
    WHEN Status = 'Current' THEN 'Current'
END AS 'Status'
FROM DimProduct P
INNER JOIN (SELECT C.ProductCategoryKey, ProductSubcategoryKey, EnglishProductCategoryName AS [Category], 
            EnglishProductSubcategoryName AS [Subcategory]
FROM DimProductCategory C) AS SubCat
ON P.ProductSubcategoryKey = SubCat.ProductSubcategoryKey;



### SQL Queries Extracted

1. **Most Popular Products**
    
    SELECT TOP 10
        Product.Name AS ProductName,
        SUM(SalesOrderDetail.OrderQty) AS TotalQuantitySold
    FROM Sales.SalesOrderDetail AS SalesOrderDetail
    INNER JOIN Production.Product AS Product
        ON SalesOrderDetail.ProductID = Product.ProductID
    GROUP BY Product.Name
    ORDER BY TotalQuantitySold DESC;
    ```

2. **Geographic Regions with Most Sales**
    
    SELECT
        SalesTerritory.[Group] AS GeographicRegion,
        ROUND(SUM(SalesOrderHeader.TotalDue), 2) AS TotalSales
    FROM Sales.SalesOrderHeader AS SalesOrderHeader
    INNER JOIN Sales.Customer AS Customer
        ON SalesOrderHeader.CustomerID = Customer.CustomerID
    INNER JOIN Sales.SalesTerritory AS SalesTerritory
        ON SalesOrderHeader.TerritoryID = SalesTerritory.TerritoryID
    GROUP BY SalesTerritory.[Group]
    ORDER BY TotalSales DESC;
    ```

3. **Sales Volume Over Time**
    
    SELECT 
        YEAR(OrderDate) AS SalesYear, 
        ROUND(SUM(TotalDue), 2) AS TotalSales 
    FROM Sales.SalesOrderHeader 
    GROUP BY YEAR(OrderDate)
    ORDER BY SalesYear;
    ```

4. Revenue by Customer Segments**
    
    SELECT 
        CASE 
            WHEN Customer.AccountNumber LIKE 'AW%' THEN 'A'
            WHEN Customer.AccountNumber LIKE 'CB%' THEN 'C'
            ELSE 'B'
        END AS CustomerSegment,
        SUM(SalesOrderHeader.TotalDue) AS TotalRevenue
    FROM Sales.SalesOrderHeader AS SalesOrderHeader
    INNER JOIN Sales.Customer AS Customer
        ON SalesOrderHeader.CustomerID = Customer.CustomerID
    GROUP BY 
        CASE 
            WHEN Customer.AccountNumber LIKE 'AW%' THEN 'A'
            WHEN Customer.AccountNumber LIKE 'CB%' THEN 'C'
            ELSE 'B'
        END
    ORDER BY TotalRevenue DESC;
    

5.Effectiveness of Promotional Campaigns**
    
    SELECT
        SalesMonth,
        ROUND(SUM(MonthlySalesRevenue), 2) AS TotalSalesRevenue,
        MAX(PromotionRunning) AS PromotionRunning
    FROM (
        SELECT
            CONVERT(CHAR(7), SalesOrderHeader.OrderDate, 120) AS SalesMonth,
            SUM(SalesOrderDetail.LineTotal) AS MonthlySalesRevenue,
            CASE
                WHEN EXISTS (
                    SELECT 1 FROM Sales.SpecialOffer AS SO
                    WHERE SalesOrderHeader.SalesOrderID IN (
                        SELECT SalesOrderID FROM Sales.SalesOrderDetail
                        WHERE SpecialOfferID = SO.SpecialOfferID
                    )
                    AND GETDATE() BETWEEN SO.StartDate AND SO.EndDate
                )
                THEN 'Yes'
                ELSE 'No'
            END AS PromotionRunning
        FROM 
            Sales.SalesOrderDetail AS SalesOrderDetail
        INNER JOIN 
            Sales.SalesOrderHeader AS SalesOrderHeader 
            ON SalesOrderDetail.SalesOrderID = SalesOrderHeader.SalesOrderID
        GROUP BY 
            CONVERT(CHAR(7), SalesOrderHeader.OrderDate, 120),
            SalesOrderHeader.SalesOrderID
    ) AS MonthlySales
    GROUP BY 
        SalesMonth
    ORDER BY 
        SalesMonth DESC;
    

6. Most Successful Salespeople**
    
    SELECT 
        sp.BusinessEntityID, 
        ROUND(SUM(soh.TotalDue), 2) AS TotalSales, 
        sp.SalesQuota
    FROM Sales.SalesPerson sp
    JOIN Sales.SalesOrderHeader soh
        ON sp.BusinessEntityID = soh.SalesPersonID
    GROUP BY sp.BusinessEntityID, sp.SalesQuota
    ORDER BY TotalSales DESC;
    

7. Sales Performance by Geographic Region**
    
    SELECT 
      ST.Name AS TerritoryName, 
      SUM(SOH.TotalDue) AS TotalSales
    FROM 
      Sales.SalesOrderHeader SOH 
      INNER JOIN Sales.Customer C ON SOH.CustomerID = C.CustomerID
      INNER JOIN Sales.SalesPerson SP ON SOH.SalesPersonID = SP.BusinessEntityID
      INNER JOIN Sales.SalesTerritory ST ON SP.TerritoryID = ST.TerritoryID
    GROUP BY 
      ST.Name
    ORDER BY 
      TotalSales DESC;
    

8. Correlation between Salesperson Characteristics and Performance**
    
    SELECT 
        sp.TerritoryID,
        sp.SalesQuota,
        SUM(soh.TotalDue) AS TotalSales
    FROM 
        Sales.SalesPerson sp
        INNER JOIN Sales.SalesOrderHeader soh ON sp.BusinessEntityID = soh.SalesPersonID
    GROUP BY 
        sp.TerritoryID,
        sp.SalesQuota
    ORDER BY 
        TotalSales DESC;
    

9. Revenue by Territory**
    
    SELECT st.TerritoryID, st.Name AS TerritoryName, ROUND(SUM(soh.TotalDue), 2) AS TotalRevenue
    FROM Sales.SalesTerritory st
    INNER JOIN Sales.SalesOrderHeader soh ON st.TerritoryID = soh.TerritoryID
    GROUP BY st.TerritoryID, st.Name
    ORDER BY TotalRevenue DESC;
    

10. Sales Performance by Territory**
    
    SELECT 
      st.Name AS TerritoryName,
      ROUND(SUM(soh.TotalDue), 2) AS TotalSales,
      AVG(sod.OrderQty) AS AvgOrderQuantity,
      AVG(sod.LineTotal) AS AvgOrderValue
    FROM 
      Sales.SalesOrderHeader AS soh
      INNER JOIN Sales.SalesOrderDetail AS sod ON soh.SalesOrderID = sod.SalesOrderID
      INNER JOIN Sales.SalesPerson AS sp ON soh.SalesPersonID = sp.BusinessEntityID
      INNER JOIN Sales.SalesTerritory AS st ON sp.TerritoryID = st.TerritoryID
    GROUP BY 
      st.Name
    ORDER BY 
      TotalSales DESC;
    

11. Most Profitable Products**
    
    SELECT TOP 10 
        p.Name AS ProductName, 
        SUM(od.LineTotal) AS TotalSales, 
        SUM(od.LineTotal - (od.OrderQty * p.StandardCost)) AS TotalProfit,
        (SUM(od.LineTotal - (od.OrderQty * p.StandardCost)) / SUM(od.LineTotal)) * 100 AS ProfitMargin
    FROM 
        Sales.SalesOrderDetail od
        INNER JOIN Production.Product p ON od.ProductID = p.ProductID
    GROUP BY 
        p.Name
    ORDER BY 
      ProfitMargin DESC;
    

12.Trends in Product Sales Over Time**
    
    SELECT CONVERT(date, MAX(Sales.SalesOrderHeader.OrderDate)) AS MaxOrderDate, 
           YEAR(Sales.SalesOrderHeader.OrderDate) AS OrderYear, 
           MONTH(Sales.SalesOrderHeader.OrderDate) AS OrderMonth,
           SUM(Sales.SalesOrderDetail.LineTotal) AS TotalSales
    FROM Sales.SalesOrderHeader
    JOIN Sales.SalesOrderDetail ON Sales.SalesOrderHeader.SalesOrderID = Sales.SalesOrderDetail.SalesOrderID
    GROUP BY YEAR(Sales.SalesOrderHeader.OrderDate), MONTH(Sales.SalesOrderHeader.OrderDate)
    ORDER BY OrderYear, OrderMonth;
    ```

13. Product Popularity by Geographic Region**
    
    SELECT TOP 10 
        p.Name AS ProductName,
        st.Name AS TerritoryName,
        SUM(od.OrderQty) AS TotalQuantitySold
    FROM 
        Sales.SalesOrderDetail od
        INNER JOIN Production.Product p ON od.ProductID = p.ProductID
        INNER JOIN Sales.SalesOrderHeader oh ON od.SalesOrderID = oh.SalesOrderID
        INNER JOIN Sales.SalesTerritory st ON oh.TerritoryID = st.TerritoryID
    GROUP BY 
        p.Name, 
        st.Name
    ORDER BY 
        TotalQuantitySold DESC;
    

14. Supplier Performance by Product Category**
   
    SELECT pc.Name AS CategoryName, v.Name AS VendorName,
        COUNT(DISTINCT po.PurchaseOrderID) AS TotalOrders,
        SUM(pod.OrderQty * pod.UnitPrice) AS TotalSpent
    FROM Production.Product AS p
    JOIN Production.ProductSubcategory AS pcs ON pcs.ProductSubcategoryID = p.ProductSubcategoryID
    JOIN Production.ProductCategory AS pc ON pc.ProductCategoryID = pcs.ProductCategoryID
    JOIN Purchasing.PurchaseOrderDetail AS pod ON pod.ProductID = p.ProductID
    JOIN Purchasing.PurchaseOrderHeader AS po ON po.PurchaseOrderID = pod.PurchaseOrderID
    JOIN Purchasing.Vendor AS v ON v.BusinessEntityID = po.VendorID
    GROUP BY pc.Name, v.Name
    ORDER BY pc.Name ASC, TotalSpent DESC;
    ```

15.  Total Revenue by Order Year and Quarter**
    
    SELECT YEAR(OrderDate) AS OrderYear, DATEPART(QUARTER, OrderDate) AS OrderQuarter, SUM(TotalDue) AS TotalRevenue
    FROM Sales.SalesOrderHeader
    GROUP BY YEAR(OrderDate), DATEPART(QUARTER, OrderDate);
    ```
